type Course @model
  @key(name: "queryName", fields:["queryName", "title"], queryField: "coursesByName" ) 
{
  id: ID!
  queryName : String!
  title: String!
  teacherName: String!
  startAt : AWSDate!
  teacherEmail: String

  students: [Student]  @connection(keyName: "byStudentCourse", fields: ["id"])
  tasks: [Task] @connection(keyName: "byCourse", fields: ["id"])
  products: [Product] @connection(keyName: "byCourse", fields: ["id"])
}

# Create a join model and disable queries as you don't need them
# and can query through Post.editors and User.posts

type TaskWithAnswer
@model
@key(name: "byTaskWIthAnswerStudent", fields: ["studentID"])
#@key(name: "byTaskWithAnswer", fields: ["taskID"])
{
id : ID!
uploadPath: String
studentID : ID
#taskID : ID
task : Task @connection(name: "byTaskWithAnswer")
}


type Task
  @model
  @key(name: "byCourse", fields: ["courseID"])
  {
  id: ID!
  courseID: ID!
  taskWithAnswer: TaskWithAnswer  @connection(name: "byTaskWithAnswer")
  taskTitle: String!
  taskContent : String
  toUpload: Boolean!

}

type Product
  @model
  @key(name: "byCourse", fields: ["courseID"])
  @key(name: "queryName", fields:["queryName", "productName"], queryField: "productsByName" ) 

{
  id: ID!
  courseID: ID
  queryName:String!
  studentInfo: StudentProduct @connection(name: "byStudent")
  productName: String
  productPrice: Int

}
type StudentProduct
@model 
@key(name: "byStudent", fields: ["studentID"])
{
  id: ID!
  studentID: ID
  product : Product @connection(name: "byStudent")
  quantity :Int
}



type Student @model 
 @key(name: "byStudentCourse", fields: ["courseID"])
 @key(name: "queryName", fields:["queryName", "name"], queryField: "studentsByName" ) 
{
  id: ID!
  name: String!
  queryName: String!
  address: String
  phone: AWSPhone
  email : String!
  courseID :ID
  taskswithAndwer: [TaskWithAnswer] @connection(keyName: "byTaskWIthAnswerStudent", fields: ["id"])
  studentProducts: [StudentProduct] @connection(keyName: "byStudent", fields: ["id"])
}



